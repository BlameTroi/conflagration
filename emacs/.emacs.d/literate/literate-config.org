This is my literate config. There are many like it, or maybe not, but this is mine.


** Preliminaries

Lexical scope please.

#+begin_src emacs-lisp
  ;; -*- coding: utf-8; lexical-binding: t -*-
#+end_src

Packages are handled with ~use-package~. So many options, but this is the one that suites me best. I'm using ~diminish~ to remove clutter from the mode line. Both are handled in the base init.el file.


** Who are you?

#+begin_src emacs-lisp

  (setq user-full-name "Troy Brumley"
        user-mail-address "BlameTroi@gmail.com")
  (setq auth-sources '("~/.authinfo.gpg")
        auth-source-cache-expiry nil)

#+end_src


** Save the desktop or not?

I'm not a 'leave the editor up all the time' guy, but Emacs isn't just an editor.

On my Mac laptop, I keep hitting the command key by mistake so confirm kill is back in vogue.

#+begin_src emacs-lisp

  ;;  (desktop-save-mode 1)

  (use-package persistent-scratch
    :config
    (persistent-scratch-setup-default))

  (when (display-graphic-p) (setq confirm-kill-emacs 'yes-or-no-p))
#+end_src


** I hate meeces to pieces!

Actually I don't, but touch pad accidents happen on my Mac Air, so let's try this. Another option can be found at https://endlessparentheses.com/disable-mouse-only-inside-emacs.html which might actually work better for me.

#+begin_src emacs-lisp

;;  (use-package disable-mouse              
;;    :config (global-disable-mouse-mode))

#+end_src


** Check please

I saw this trick, and it's cool enough, but I need to figure out how to get meaningful information about errors to clean them up.

#+begin_src emacs-lisp

  (defun check-literate-config ()
    "Warn if exiting Emacs with a literate-config.org that doesn't load."
    (or
     (ignore-errors (org-babel-load-file "~/.emacs.d/literate/literate-config.org"))
     (y-or-n-p "Configuration file may be malformed: really exit?")))

  (push #'check-literate-config kill-emacs-query-functions)

#+end_src


** Doctor, my eyes!

Font and theme. Bigger, more contrast, and fewer colors ... all things the old man with bad eyes needs.

#+begin_src emacs-lisp

  ;;(load-theme 'nofrils-acme t)
  (load-theme 'vegetative t)
    ;;(load-theme 'ef-melissa-dark t)
  (add-to-list 'default-frame-alist
               '(font . "SauceCodePro Nerd Font Mono-22.0"))
  (set-frame-font "SauceCodePro Nerd Font Mono-22.0" nil t)
  ;;(set-face-attribute 'italic nil
  ;;                   :family "Inconsolata-Italic")

  ;;(ignore-errors (set-frame-font "SauceCodePro Nerd Font Mono-24.0"))

#+end_src


** A path least chosen

Mac OS and possibly Linux need to know the shell's exec path. The ~use-package~ helper could be enabled to check for dependencies and install them, but I'm going to do that manually for now.

#+begin_src emacs-lisp

    (use-package exec-path-from-shell
      :init
      (exec-path-from-shell-initialize))

  ;; (use-package use-package-ensure-system-package)

#+end_src

Emacs leaves backups and auto-saves all over the file system. I'm leaving auto-saves and lock files in the same directory as the base file, but backups are off under .tmp. Some disable auto-save and backup, but I'm not there yet.

Note that if you do the auto-save file name transform incorrectly you can end up with all your auto saves named "##" which is not what you want. If you see a confusing "file has auto save data consider M-x recover" for a new file, that is probably what is happening.

#+begin_src emacs-lisp

  ;; non packaged stuff or my own work in progress
  (add-to-list 'load-path (concat user-emacs-directory "site-lisp/"))

  ;; autosave and backup and temp
  (setq auto-save-no-message t)
  (make-directory "~/.tmp/emacs/backup/" t)
  (setq temporary-file-directory "~/.tmp/emacs/")
  (setq backup-directory-alist '(("." . "~/.tmp/emacs/backup/")))
  (setq backup-by-copying t)

  ;; can't hurt to move deleted files out of the way
  (setq delete-by-moving-to-trash t)

#+end_src

I keep my own work under a projects directory.

#+begin_src emacs-lisp

  (setq default-directory "~/projects/")

#+end_src

The customization interface is wired into Emacs and you can't get rid of it completely. I don't like my configs changing automagically. Using a separate customization file keeps from muddling up my config and makes it easy to review a customization change. I never autoload this file.

As I've borrowed code from other configurations I've seen some use ~setq~ in their ~use-package~ ~:config~ blocks, while others use the ~:custom~ block in the form (variable value). I'm slowly switching things to use the custom variables form.

As an aside, I have mixed feelings about long ~setq~ expressions. From a maintenance standpoint, one variable per expression makes sense, but there's no clear preference in the code I see. I'll try to use long expressions for obviously related variables, but I'm sure I'll miss a few.

#+begin_src emacs-lisp

  (setq custom-file (concat user-emacs-directory "custom.el"))

#+end_src


** Default is in our stars

So many things to tweak. They don't all fall into neat categories but they are all pretty straight forward.

#+begin_src emacs-lisp

  ;; frame and dialogs and some big chunk things
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message "so let it be written, so let it be done")
  (setq use-dialog-box nil)
  (setq use-file-dialog nil)
  (setq frame-resize-pixelwise t)
  (setq ring-bell-function 'ignore)

  ;; mode line and status reporting
  (size-indication-mode t)
  (column-number-mode)
  (setq mode-line-position-column-format " C%C")

  ;; move to the help window when it opens, allows a quick 'q' to close
  ;; the window.
  (setq help-window-select t)

  ;; save some typing
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; links should be clickable, and if they are file links for errors, make
  ;; them obvious.
  (global-goto-address-mode)
  (setq next-error-message-highlight t)

  (global-so-long-mode +1)
  (setq large-file-warning-threshold 10000000)

  (save-place-mode 1)
  (savehist-mode)
  (setq save-place-forget-unreadable-files nil)

  (setq view-read-only t)

  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode)

  (setq global-mark-ring-max 100)
  (setq mark-ring-max 100)
  (setq kill-do-not-save-duplicates t)
  (delete-selection-mode t)

#+end_src


** Scrolling

Various things, including a smoother scroll in the style of vim.

#+begin_src emacs-lisp

  (setq scroll-preserve-screen-position t)
  (setq scroll-margin 0)
  (setq scroll-step 1)                 ;; a better scroll
  (setq scroll-conservatively 10000)   ;; more like vim

#+end_src


** Spaces and tabs and indents

This seems like a good place to deal with tabs, spaces, and indenting. Tabs are evil adjacent. I know /makefiles/ and /go/ want them, but otherwise not in my code.

This has to be a setq-default since a setq makes the value buffer-local.

#+begin_src emacs-lisp

  (setq-default indent-tabs-mode nil)

#+end_src

And here is what I think rational indenting and spacing look like. I was using a width of two but on the new laptop three looks better. I love me some wide screens.

#+begin_src emacs-lisp

  (setq-default tab-width 3)
  (setq standard-indent 3)
  (setq sentence-end-double-space nil)
  (setq mode-require-final-newline t)

#+end_src

In a programming mode I expect return/enter to re-indent program text. While Markdown actually wants trailing spaces on some lines, I don't want that in my code.

But as I wrestle with ~electric-indent-mode~ I have learned about C-j and C-o. I'm going to disable the mapping of RET for a while and see how I get by with that.

#+begin_src emacs-lisp

    (use-package ws-butler
      :diminish
      :hook (prog-mode . ws-butler-mode))

    (use-package clean-aindent-mode)
  
  ;;  (add-hook 'prog-mode-hook
  ;;            (lambda ()
  ;;              (local-set-key (kbd "RET") 'newline-and-indent)))

#+end_src


** Encode and Decode Enigmas

I'm a dinosaur who likes ASCII and EBCDIC. If it takes more than 8 bits, it's too big! OK, seriously, it's a unicode world that I live in even if I personally don't take much advantage of it. Let's try to play nice.

#+begin_src emacs-lisp

  (set-charset-priority 'unicode)
  (prefer-coding-system 'utf-8)

#+end_src


** Completion

There's so much that can be done in this area, but for now I'll leave things with the stock ~dabbrev~ but I will use the ~vertico~ package for an interface.

#+begin_src emacs-lisp

  (use-package vertico
    :config
    (vertico-mode t))

  (setq completion-styles '(partial-completion substring flex))
  (setq read-file-name-completion-ignore-case t)
  
#+end_src


** Recency Bias

Recent files and similar things.

#+begin_src emacs-lisp

  (use-package recentf
    :config
    (setq recentf-max-menu-items 25
          recentf-max-saved-items 250)
    (add-to-list 'recentf-exclude "\\elpa")
    (recentf-mode))

#+end_src


** Searching

Search using regular expressions.

#+begin_src emacs-lisp

  (bind-key "C-s" #'isearch-forward-regexp)
  (bind-key "C-c s" #'isearch-forward-symbol)

#+end_src


** Lisping and Scheming with Guile

Mostly emacs-lisp and scheme related things, but some of them appply to all programming modes.

Some helpful libraries for elisp.

#+begin_src emacs-lisp

  (use-package s) ;; strings
  (use-package f) ;; file and directory api
  (use-package dash) ;; lists

#+end_src

Programming mode behaviors, some of these bleed into other languages and that's OK.

#+begin_src emacs-lisp

  ;; parenthetically speaking ...
  (setq-default show-paren-delay 0)
  (show-paren-mode)

  ;; eldoc goodness
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)

  ;; underscores are usually word characters for programmers
  (modify-syntax-entry ?_ "w" (standard-syntax-table))

#+end_src

I saw there's a Geiser wannabe out there, but I haven't investigated.

#+begin_src emacs-lisp

  ;; scheme, lisp, and repls.
  (use-package geiser
    :defer t
    :config
    (setq geiser-repl-use-other-window nil))

  (use-package geiser-guile
    :defer t
    :after geiser)

  (use-package paredit
    :defer t)

  (use-package srfi)               ;; browse interface to srfi

#+end_src


** Lost at C

Not much needed here at the moment.

#+begin_src emacs-lisp

  (setq c-defalt-style "k&r")
  (setq c-basic-offset 2)

#+end_src


** Shell

#+begin_src emacs-lisp

  (setq sh-basic-offset 2)
  (setq sh-basic-indentation 2)
  (add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))

#+end_src


** Pascal's Triangular Wager

The Pascal mode needs work, but it'll do for now.

#+begin_src emacs-lisp

  (use-package pascal
    :defer t
    :custom
    (pascal-auto-lineup '(all paramlist declaration case))
    (pascal-auto-newline nil)
    (pascal-indent-level 3)
    (pascal-case-indent 6)
    ;; (pascal--extra-indent 3)
    (pascal-indent-nested-functions nil)
    :config
    ;; this is a helper for compiler message parsing
    (defun troi/pascal-helper ()
      (interactive)
      (setq compilation-error-regexp-alist-alist
            (cons '(pascal "^\\(.*\\)(\\([0-9]+\\)+\\,\\([0-9]+\\)).*"
                           1 ;; file
                           2 ;; line
                           3 ;; column?
                           )
                  compilation-error-regexp-alist-alist))
      (setq compilation-error-regexp-alist
            (cons 'pascal compilation-error-regexp-alist)))
    (add-hook 'pascal-mode-hook (lambda ()
                                  (troi/pascal-helper))))

  (use-package bnf-mode
    :defer t)
#+end_src


** Ruby, you're a fine girl

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist
               '("\\.\\(?:cap\\|gemspec\\|irbrc\\|gemrc\\|rake\\|rb\\|ru\\|thor\\)\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist
               '("\\(?:Brewfile\\|Capfile\\|Gemfile\\(?:\\.[a-zA-Z0-9._-]+\\)?\\|[rR]akefile\\)\\'" . ruby-mode))
  (setq ruby-indent-level 3)
#+end_src


** Standard ML

I enjoyed it but I don't know if I'll be using it much.

#+begin_src emacs-lisp

  (use-package sml-mode
    :defer t
    :mode ("\\.sml\\'" . sml-mode))

#+end_src


** A spell, abracadabra!

Use aspell if it's available.

#+begin_src emacs-lisp

  (if (executable-find "aspell")
      (progn
        (setq ispell-program-name "aspell")
        (setq ispell-extra-args '("--sug-mode=ultra")))
    (setq ispell-program-name "ispell"))
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)

#+end_src


** Templates with ~autoinsert~

(Dis)Enable ~autoinsert~. I still need to roll up some template files. And Pascal snippets.

After more research, I'm thinking snippets are better for my habits.

#+begin_src emacs-lisp

  ;; auto insert mode for new files
  ;; (use-package autoinsert
  ;;   :init
  ;;   (setq auto-insert-query nil)
  ;;   (setq auto-insert-directory (locate-user-emacs-file "troi-templates"))
  ;;   (add-hook 'find-file-hook 'auto-insert)
  ;;   (auto-insert-mode 1))

#+end_src


** No comment, next question.

#+begin_src emacs-lisp

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Full width comment box                                                 ;;
  ;; from http://irreal.org/blog/?p=374                                     ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defun troi-comment-box (b e)
    "Draw a box comment around the region but arrange for the region to extend to at least the fill column. Place the point after the comment box."

    (interactive "r")

    (let ((e (copy-marker e t)))
      (goto-char b)
      (end-of-line)
      (insert-char ?  (- fill-column (current-column)))
      (comment-box b e 1)
      (goto-char e)
      (set-marker e nil)))

  (global-set-key (kbd "C-c b b") 'troi-comment-box)

#+end_src

** ~Dired~ 

~Dired~ needs a few tweaks. And we'll need the GNU ~coreutils~ for a useful ~ls~.

#+begin_src emacs-lisp

  (require 'dired)
  (require 'dired-x)

  (setq dired-create-destination-dirs 'ask
        dired-dwim-target t
        dired-kill-when-opening-new-dired-buffer t
        dired-mark-region t
        dired-recursive-copies 'always
        dired-recursive-deletes 'top)
  (add-hook 'dired-mode-hook #'auto-revert-mode)
  (when (string= system-type "darwin")
    (let ((gls (executable-find "gls")))
      (when gls
        (setq dired-use-ls-dired t
              insert-directory-program gls
              dired-listing-switches "-aBhl --group-directories-first"))))

#+end_src


** ~Which-Key~ Where Key

Which-key is the most helpful packages when using new parts of emacs.

#+begin_src emacs-lisp

  (use-package which-key
    :diminish
    :config
    (which-key-mode))

#+end_src


** ~Org~ mode

A set of "let's start somewhere" settings for org.

#+begin_src emacs-lisp

  (use-package org
    :hook
    ((org-mode . visual-line-mode)
     (org-src-mode . display-line-numbers-mode))
    ;; :bind
    ;; (("C-c o c" . org-capture)
    ;;  ("C-c o a" . org-agenda)
    ;;  ("C-c o A" . consult-org-agenda))
    :custom
    (org-directory "~/Library/CloudStorage/Dropbox/org")
    (org-src-window-setup 'current-window)
    (org-startup-folded t)
    (org-default-notes-file (concat org-directory "/notes.org"))
    (org-agenda-files (list (concat org-directory "/todo.org"))))

  (use-package org-modern
    :config
    (global-org-modern-mode))

#+end_src



** ~Magit~

Magit is popular but I'm not a serious git user as a lone hobbiest programmer. It's included in the hope that I'll be a little more serious about source control. Offsite backup is nice, but I know you can do more with vcs.

Disabled until I feel a need to stop going to a shell.

#+begin_src emacs-lisp

  ;; (use-package magit
  ;;   :disabled
  ;;   :bind
  ;;   (("C-c g" . #'magit-status))
  ;;   :custom
  ;;   (magit-diff-refine-hunk t)
  ;;   (magit-repository-directories '(("~/projects" . 1)))
  ;;   (magit-list-refs-sortby "-creatordate"))

  ;; (use-package forge
  ;;   :disabled
  ;;   :after magit)

#+end_src



** Compilation

It's a bit different than ~compiler~ and ~make~ in vim.

#+begin_src emacs-lisp

  (use-package compile
    :custom
    ;;    (compilation-read-command nil "Don't prompt every time.")
    (compilation-scroll-output 'first-error))

#+end_src


** Debugging

To be provided. We need to get lldb suppport with realgud.


** Differential Preferential

Show meaningful whitespace and a few other tweaks. This section will expand as I use ediff more.

#+begin_src emacs-lisp

  ;; show important whitespace in diff-mode
  (add-hook 'diff-mode-hook
            (lambda ()
              (setq-local whitespace-style
                          '(face
                            tabs
                            tab-mark
                            spaces
                            space-mark
                            trailing
                            indentation::space
                            indentation::tab
                            newline
                            newline-mark))
              (whitespace-mode 1)))

  (setq ediff-diff-options "-w"
        ediff-split-window-function 'split-window-horizontally
        ediff-window-setup-function 'ediff-setup-windows-plain)

#+end_src


** Snippets

Snippets should handle what I wanted ~auto-insert-mode~ to do, and more. I've picked up both of the elpa standard snippet collections. Any new snippets should land under the snippets subdirectory in my .emacs.d. 

#+begin_src emacs-lisp

  (use-package yasnippet
    ;; :defer t ;; takes a while to load, so do it async
    :diminish
    :config
    (yas-global-mode))
    ;;:custom
    ;;(yas-prompt-functions '(yas-completing-prompt)))

  (use-package yasnippet-snippets
    :after yasnippet)

  (use-package yasnippet-classic-snippets
    :after yasnippet);

#+end_src


** Markdown

Another case of "one standard to bind them all" becoming many. I'm going with GitHub Flavored Markdown. It's all about the tables, though I do approve of Common Mark's efforts.

#+begin_src emacs-lisp

  (use-package markdown-mode
    :defer t
    :hook (gfm-mode . visual-line-mode)
;;    :bind (:map markdown-mode-map ("C-c C-s a" . markdown-table-align))
    :mode ("\\.md$" . gfm-mode))

#+end_src


** Tag, you're it!

Use universal ctags, etags, and/or gtags for code navigation.

I need to figure out tag generation and such.

#+begin_src emacs-lisp

  (use-package ggtags
    :defer t
    :hook (c-mode-common . (lambda ()
                             (when (derived-mode-p 'c-mode 'asm-mode 'pascal-mode)
                               (ggtags-mode 1))))
    ;; :bind (:map ggtags-mode-map
    ;;             ("C-c g s" . ggtags-find-other-symbol)
    ;;             ("C-c g h" . ggtags-view-tag-history)
    ;;             ("C-c g r" . ggtags-find-reference)
    ;;             ("C-c g f" . ggtags-find-file)
    ;;             ("C-c g c" . ggtags-create-tags)
    ;;             ("C-c g u" . ggtags-update-tags)
    ;;             ("M-," . pop-tag-mark))
    )

#+end_src
