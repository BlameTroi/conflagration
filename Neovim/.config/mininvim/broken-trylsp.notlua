this is a test.

      -- LSP servers setup
      vim.api.nvim_create_autocmd('LspAttach', {
        group = vim.api.nvim_create_augroup('native-lsp-attach', { clear = true }),
        callback = function(event)
          local map = function(keys, func, desc, mode)
            mode = mode or 'n'
            vim.keymap.set(mode, keys, func, { buffer = event.buf, desc = 'LSP: ' .. desc })
          end

          -- -- Load telescope LSP keymaps if available
          -- local telescope_keymaps_ok, telescope_keymaps = pcall(require, 'custom.plugins.telescope.lsp_keymaps')
          -- if telescope_keymaps_ok then
          --   telescope_keymaps.setup_lsp_keymaps(event.buf)
          -- end

          -- Common LSP keymaps
          map('<leader>rn', vim.lsp.buf.rename, '[R]e[n]ame')
          map('<leader>ca', vim.lsp.buf.code_action, '[C]ode [A]ction', { 'n', 'x' })
          map('gD', vim.lsp.buf.declaration, '[G]oto [D]eclaration')

          -- Document highlighting
          local client = vim.lsp.get_client_by_id(event.data.client_id)
          if client and client:supports_method(vim.lsp.protocol.Methods.textDocument_documentHighlight) then
            local highlight_group = vim.api.nvim_create_augroup('native-lsp-highlight', { clear = false })
            vim.api.nvim_create_autocmd({ 'CursorHold', 'CursorHoldI' }, {
              buffer = event.buf,
              group = highlight_group,
              callback = vim.lsp.buf.document_highlight,
            })

            vim.api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {
              buffer = event.buf,
              group = highlight_group,
              callback = vim.lsp.buf.clear_references,
            })

            vim.api.nvim_create_autocmd('LspDetach', {
              group = vim.api.nvim_create_augroup('native-lsp-detach', { clear = true }),
              callback = function(event2)
                vim.lsp.buf.clear_references()
                vim.api.nvim_clear_autocmds { group = 'native-lsp-highlight', buffer = event2.buf }
              end,
            })
          end

          -- Inlay hints toggle
          if client and client:supports_method(vim.lsp.protocol.Methods.textDocument_inlayHint) then
            map('<leader>th', function()
              vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled { bufnr = event.buf })
            end, '[T]oggle Inlay [H]ints')
          end
        end,
      })
---- autcmd end here ---
      vim.notify('Loading lua LSP config', vim.log.levels.INFO)
      -- Set global configuration for all language servers
      vim.lsp.config('*', {
        -- Default root marker for all LSP servers
        root_markers = { '.git' },
        -- Common capabilities for all servers
        capabilities = {
          textDocument = {
            completion = {
              completionItem = {
                snippetSupport = true,
                commitCharactersSupport = true,
                deprecatedSupport = true,
                tagSupport = {
                  valueSet = { 1 }, -- Deprecated
                },
                preselectSupport = true,
                resolveSupport = {
                  properties = {
                    'documentation',
                    'detail',
                    'additionalTextEdits',
                  },
                },
              },
            },
          },
        },
      })

      -- Enable LSP configurations - these will use the runtime path loaded configurations
      vim.lsp.enable 'lua_ls'
      vim.lsp.enable 'ts_ls'
      vim.lsp.enable 'ruby_ls'
      vim.lsp.enable 'bash_ls'
      vim.lsp.enable 'html_ls'
      -- TODO: vim.lsp.enable({ "ts_ls", "cssls", "tailwindcssls" })
      -- https://github.com/Rishabh672003/Neovim/blob/main/lua/rj/lsp.lua
    end,
  },

